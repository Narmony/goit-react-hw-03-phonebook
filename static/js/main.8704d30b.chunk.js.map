{"version":3,"sources":["components/ContactsList/contactsList.module.css","components/ContactsForm/ContactsForm.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","App.jsx","index.js","components/ContactsForm/contactsForm.module.css","components/Filter/filter.module.css"],"names":["module","exports","ContactsForm","state","name","number","nameInputId","uuidv4","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","onSubmit","props","reset","this","className","styles","form","htmlFor","name_input","onChange","id","type","pattern","title","required","number_input","add_Btn","Component","ContactsList","contacts","onDelete","contacts_block","contacts_title","map","contact_item","onClick","Filter","searchWrap","App","filter","addContact","contact","includes","alert","prevState","deleteContact","contactId","changeFilter","getVisibleContacts","normalizedFilter","toLocaleLowerCase","localStorage","getItem","parsedContacts","JSON","parse","prevProps","console","log","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8704d30b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"contactsList_name__3OkeU\",\"contacts_block\":\"contactsList_contacts_block__15lQl\",\"contact_item\":\"contactsList_contact_item__1N_G3\",\"contacts_title\":\"contactsList_contacts_title__3Kxou\"};","import styles from './contactsForm.module.css';\nimport { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nclass ContactsForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n    // this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h2>Phonebook</h2>\n        <div className={styles.form}>\n          <label htmlFor={this.nameInputId} className={styles.name_input}>\n            <span>Name</span>\n            <input\n              onChange={this.handleChange}\n              id={this.nameInputId}\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n\n          <label htmlFor={this.numberInputId} className={styles.number_input}>\n            <span>Number</span>\n            <input\n              onChange={this.handleChange}\n              id={this.numberInputId}\n              type=\"tel\"\n              name=\"number\"\n              value={this.state.number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n            <button type=\"submit\" className={styles.add_Btn}>\n              Add contact\n            </button>\n          </label>\n        </div>\n      </form>\n    );\n  }\n}\n\nContactsForm.propTypes = {\n  initialState: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nexport default ContactsForm;\n","import styles from './contactsList.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactsList = ({ contacts, onDelete }) => {\n  return (\n    <div className={styles.contacts_block}>\n      <span className={styles.contacts_title}>Contacts:</span>\n      <ul>\n        {contacts.map(({ name, number, id }) => (\n          <li className={styles.contact_item} key={id}>\n            <span className={styles.name}>{name}</span>\n            <span className={styles.number}>{number}</span>\n            <button onClick={() => onDelete(id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nContactsList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nexport default ContactsList;\n","import styles from './filter.module.css';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.searchWrap}>\n    <span className={styles.title}>Find contacts by name:</span>\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { Component } from 'react';\nimport ContactsForm from './components/ContactsForm';\nimport ContactsList from './components/ContactsList';\nimport Filter from './components/Filter';\nimport './styles.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass App extends Component {\n  state = {\n    // contacts: [\n    //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    // ],\n    contacts: [],\n    filter: '',\n  };\n\n  addContact = ({ name, number }) => {\n    // const state = {\n    //   id: uuidv4(),\n    //   name,\n    //   number,\n    // };\n    // const visibleContacts = this.getVisibleContacts();\n    // const vis = visibleContacts.find(nam => nam.name === name);\n\n    // console.log(visibleContacts);\n    // console.log(vis);\n    const checkedName = this.state.contacts\n      .map(contact => contact.name)\n      .includes(name);\n\n    if (checkedName) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    // if (vis) {\n    //   alert(`${name} is already in contacts`);\n    //   return;\n    // }\n    this.setState(prevState => ({\n      contacts: [{ id: uuidv4(), name, number }, ...prevState.contacts],\n    }));\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({\n      filter: e.currentTarget.value,\n    });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLocaleLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter),\n    );\n  };\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('app component did update');\n\n    if (this.state.contacts !== prevState.contacts) {\n      console.log('changes');\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const visibleContacts = this.getVisibleContacts();\n    const { filter } = this.state;\n    return (\n      <div className=\"app\">\n        <ContactsForm onSubmit={this.addContact} />\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactsList\n          contacts={visibleContacts}\n          onDelete={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactsForm_form__2v-iC\",\"add_Btn\":\"contactsForm_add_Btn__2YOYD\",\"name_input\":\"contactsForm_name_input__3gjZp\",\"number_input\":\"contactsForm_number_input__4ztsY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchWrap\":\"filter_searchWrap__3TG7j\",\"title\":\"filter_title__212N-\"};"],"sourceRoot":""}